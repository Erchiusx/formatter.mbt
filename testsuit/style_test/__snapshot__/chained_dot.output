// generated file, do not edit!
fn chained_dot_oneline() -> Unit {
  Builder::new(args).f(args).g(args).h(args)
}

fn chained_dot() -> Unit {
  Builder::new(args)
    .method1(arg1___________________, arg2_______________________)
    .method2(arg1___________________, arg2_______________________)
    .method3(arg1___________________, arg2_______________________)
    .method4(arg1___________________, arg2_______________________)
    .method5(arg1___________________, arg2_______________________)
    .method6(arg1___________________, arg2_______________________)
}

fn chained_dot_long_args() -> Unit {
  Builder::new(args)
    .method1(
      arg1___________________,
      arg2_______________________,
      arg3_______________________,
    )
    .method2(arg1___________________, arg2_______________________)
    .method3(
      arg1___________________,
      arg2_______________________,
      arg3_______________________,
    )
    .method4(
      arg1___________________,
      arg2_______________________,
      arg3_______________________,
    )
    .method5(arg1___________________, arg2_______________________)
    .method6(arg1___________________, arg2_______________________)
}

fn chained_cascade() -> Unit {
  Builder::new(args)
    ..method1(arg1___________________, arg2_______________________)
    ..method2(arg1___________________, arg2_______________________)
    ..method3(arg1___________________, arg2_______________________)
    ..method4(arg1___________________, arg2_______________________)
    ..method5(arg1___________________, arg2_______________________)
    .method6(arg1___________________, arg2_______________________)
}

fn chained_dot_short_self() -> Unit {
  x.method1(arg1___________________, arg2_______________________)
    .method2(arg1___________________, arg2_______________________)
    .method3(arg1___________________, arg2_______________________)
    .method4(arg1___________________, arg2_______________________)
    .method5(arg1___________________, arg2_______________________)
    .method6(arg1___________________, arg2_______________________)
}

fn chained_dot_func() -> Unit {
  func(
    arg1__________________________________________,
    arg2__________________________________________,
  )
  .method1(arg1___________________, arg2_______________________)
    .method2(arg1___________________, arg2_______________________)
    .method3(arg1___________________, arg2_______________________)
    .method4(arg1___________________, arg2_______________________)
    .method5(arg1___________________, arg2_______________________)
    .method6(arg1___________________, arg2_______________________)
}

fn chained_dot_func_with_long_args() -> Unit {
  func(
    arg1__________________________________________,
    arg2__________________________________________,
  )
  .method1(
      arg1___________________,
      arg2_______________________,
      arg3_______________________,
    )
    .method2(arg1___________________, arg2_______________________)
    .method3(
      arg1___________________,
      arg2_______________________,
      arg3_______________________,
    )
    .method4(
      arg1___________________,
      arg2_______________________,
      arg3_______________________,
    )
    .method5(arg1___________________, arg2_______________________)
    .method6(arg1___________________, arg2_______________________)
}

fn chained_dot_in_rhs() -> Unit {
  let a = Builder::new(args)
    .method1(arg1___________________, arg2_______________________)
    .method2(arg1___________________, arg2_______________________)
    .method3(arg1___________________, arg2_______________________)
    .method4(arg1___________________, arg2_______________________)
    .method5(arg1___________________, arg2_______________________)
    .method6(arg1___________________, arg2_______________________)
  
}

