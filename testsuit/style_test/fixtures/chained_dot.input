fn chained_dot_oneline() -> Unit {
   Builder::new(args).f(args).g(args).h(args)
}

fn chained_dot() -> Unit {
   Builder::new(args)
     .method1(arg1___________________, arg2_______________________)
     .method2(arg1___________________, arg2_______________________)
     .method3(arg1___________________, arg2_______________________)
     .method4(arg1___________________, arg2_______________________)
     .method5(arg1___________________, arg2_______________________)
     .method6(arg1___________________, arg2_______________________)
}

fn chained_dot_long_args() -> Unit {
   Builder::new(args)
     .method1(arg1___________________, arg2_______________________, arg3_______________________)
     .method2(arg1___________________, arg2_______________________)
     .method3(arg1___________________, arg2_______________________, arg3_______________________)
     .method4(arg1___________________, arg2_______________________, arg3_______________________)
     .method5(arg1___________________, arg2_______________________)
     .method6(arg1___________________, arg2_______________________)
}

fn chained_cascade() -> Unit {
  Builder::new(args)
    ..method1(arg1___________________, arg2_______________________)
    ..method2(arg1___________________, arg2_______________________)
    ..method3(arg1___________________, arg2_______________________)
    ..method4(arg1___________________, arg2_______________________)
    ..method5(arg1___________________, arg2_______________________)
     .method6(arg1___________________, arg2_______________________)
}

fn chained_dot_short_self() -> Unit {
  x
    .method1(arg1___________________, arg2_______________________)
    .method2(arg1___________________, arg2_______________________)
    .method3(arg1___________________, arg2_______________________)
    .method4(arg1___________________, arg2_______________________)
    .method5(arg1___________________, arg2_______________________)
    .method6(arg1___________________, arg2_______________________)
}

fn chained_dot_func() -> Unit {
  func(
    arg1__________________________________________,
    arg2__________________________________________,
  ).method1(arg1___________________, arg2_______________________)
    .method2(arg1___________________, arg2_______________________)
    .method3(arg1___________________, arg2_______________________)
    .method4(arg1___________________, arg2_______________________)
    .method5(arg1___________________, arg2_______________________)
    .method6(arg1___________________, arg2_______________________)
}

fn chained_dot_func_with_long_args() -> Unit {
  func(
    arg1__________________________________________,
    arg2__________________________________________,
  ).method1(arg1___________________, arg2_______________________, arg3_______________________)
    .method2(arg1___________________, arg2_______________________)
    .method3(arg1___________________, arg2_______________________, arg3_______________________)

  TypeName::func(
    arg1__________________________________________,
    arg2__________________________________________,
  ).method1(arg1___________________, arg2_______________________, arg3_______________________)
    .method2(arg1___________________, arg2_______________________)
    .method3(arg1___________________, arg2_______________________, arg3_______________________)
}

fn chained_dot_in_rhs() -> Unit {
  let a = Builder::new(args)
    .method1(arg1___________________, arg2_______________________)
    .method2(arg1___________________, arg2_______________________)
    .method3(arg1___________________, arg2_______________________)
    .method4(arg1___________________, arg2_______________________)
    .method5(arg1___________________, arg2_______________________)
    .method6(arg1___________________, arg2_______________________)
}

fn single_dot() -> Unit {
  object.long_method(arg1___________________, arg2_______________________, arg3_______________________)
  object.short_method(arg1, arg2, arg3)
  record.field
  tuple.1
}

fn mixing_dot_apply_and_record_label_and_tuple_index() -> Unit {
  record.label1.method(arg1, arg2).label2.method(arg1, arg2)
  record
    .label1
    .method(arg1________________, arg2________________)
    .1
    .label2
    .method(arg1________________, arg2________________)
    .2
    .label3
    .label4
    .method(arg1________________, arg2________________)
    .method(arg1________________, arg2________________)
    .3
    .4
}

